name: Build and push imageüì¶

on:
  workflow_dispatch:
  # schedule:
  # - cron: "00 12 1 * *"
  # push:
  #   branches: ["main"]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  APP_VERSION: 1.27.4

jobs:
  build:
    if: github.actor == 'ammnt'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
      security-events: write
      attestations: write

    steps:
      - name: Checkout repositoryüß±
        uses: actions/checkout@v4.2.2

      # - name: Install cosignüîí
      #   uses: sigstore/cosign-installer@v3.7.0

      - name: Setup Docker buildxüõ†Ô∏è
        uses: docker/setup-buildx-action@v3.7.1

      - name: Log into GHCRüîë
        uses: docker/login-action@v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log into Docker Hubüîë
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Docker metadataüî¨
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build the Docker image‚õìÔ∏è
        id: build
        uses: docker/build-push-action@v6.9.0
        with:
          provenance: false
          context: .
          platforms: linux/amd64
          load: ${{ github.event_name != 'pull_request' }}
          tags: ghcr.io/ammnt/freenginx:${{ env.APP_VERSION }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Analyze image with Docker Scoutüíä
        uses: docker/scout-action@v1.15.1
        with:
          command: cves,sbom
          image: ghcr.io/ammnt/freenginx:${{ env.APP_VERSION }}
          sarif-file: sarif.output.json
          summary: false

      - name: Upload Docker Scout reportüìä
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: sarif.output.json

      - name: Analyze image with Trivyüíä
        uses: aquasecurity/trivy-action@0.29.0
        with:
          image-ref: ghcr.io/ammnt/freenginx:${{ env.APP_VERSION }}
          scan-type: image
          format: "github"
          output: "dependency-results.sbom.json"
          severity: "MEDIUM,HIGH,CRITICAL"
          scanners: "vuln"
          github-pat: ${{ secrets.GH_TOKEN }}

      - name: Upload Trivy reportüìä
        uses: actions/upload-artifact@v4.4.3
        with:
          name: trivy-sbom-report
          path: "${{ github.workspace }}/dependency-results.sbom.json"
          retention-days: 20

      - name: Analyze image with Grypeüíä
        id: anchore
        uses: anchore/scan-action@v5.3.0
        with:
          image: ghcr.io/ammnt/freenginx:${{ env.APP_VERSION }}
          fail-build: false
          severity-cutoff: critical

      - name: Upload Grype reportüìä
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.anchore.outputs.sarif }}

      - name: Analyze image with Syftüíä
        uses: anchore/sbom-action@v0.17.6
        with:
          syft-version: v1.17.0
          image: ghcr.io/ammnt/freenginx:${{ env.APP_VERSION }}
          artifact-name: image.spdx.json
          dependency-snapshot: false

      - name: Analyze image with Snyküíä
        continue-on-error: true
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ghcr.io/ammnt/freenginx:${{ env.APP_VERSION }}
          args: --file=Dockerfile

      - name: Upload Snyk reportüìä
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif

      - name: Analyze image with Clairüíä
        run: |
          docker run -d --name db arminc/clair-db
          sleep 15
          docker run -p 6060:6060 --link db:postgres -d --name clair arminc/clair-local-scan
          sleep 1
          DOCKER_GATEWAY=$(docker network inspect bridge --format "{{range .IPAM.Config}}{{.Gateway}}{{end}}")
          wget -qO clair-scanner https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64 && chmod +x clair-scanner
          ./clair-scanner --ip="$DOCKER_GATEWAY" ghcr.io/ammnt/freenginx:${{ env.APP_VERSION }} || exit 0

      - name: Slim the Docker imageüöÄ
        uses: kitabisa/docker-slim-action@v1.1.2
        env:
          DSLIM_HTTP_PROBE: false
        with:
          target: ghcr.io/ammnt/freenginx:${{ env.APP_VERSION }}
          tag: ghcr.io/ammnt/freenginx:${{ env.APP_VERSION }}
          overwrite: true

      - name: Explore the Docker image with Diveüîç
        timeout-minutes: 2
        env:
          CI: true
        run: |
          wget -q https://github.com/wagoodman/dive/releases/download/v0.12.0/dive_0.12.0_linux_amd64.tar.gz
          tar xvzf dive_0.12.0_linux_amd64.tar.gz -C /usr/local/bin
          dive --ci-config "${{ github.workspace }}/.dive-ci/" ghcr.io/ammnt/freenginx:${{ env.APP_VERSION }}

      - name: Test the Docker imageüß™
        run: |
          docker run -d --rm -p 127.0.0.1:8080:8080/tcp ghcr.io/ammnt/freenginx:${{ env.APP_VERSION }}
          curl -v http://127.0.0.1:8080 || exit 1

      - name: Push the Docker images to registriesüíæ
        run: |
          docker tag ghcr.io/ammnt/freenginx:${{ env.APP_VERSION }} ghcr.io/ammnt/freenginx:latest
          docker tag ghcr.io/ammnt/freenginx:${{ env.APP_VERSION }} ammnt/freenginx:${{ env.APP_VERSION }}
          docker tag ghcr.io/ammnt/freenginx:${{ env.APP_VERSION }} ammnt/freenginx:latest
          docker push ghcr.io/ammnt/freenginx --all-tags
          docker push ammnt/freenginx --all-tags
          DIGEST=$(docker images --no-trunc --quiet ghcr.io/ammnt/freenginx:${{ env.APP_VERSION }})
          echo "DIGEST=$DIGEST" >> $GITHUB_ENV

      - name: Attestation the Docker imageüìç
        uses: actions/attest-build-provenance@v1.4.4
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ env.DIGEST }}
          push-to-registry: false

      # - name: Sign the published Docker imageüîê
      #   env:
      #     COSIGN_EXPERIMENTAL: "true"
      #   run: |
      #     echo ${{ env.DIGEST }}
      #     cosign sign ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ env.DIGEST }}
      #     cosign sign ${{ env.IMAGE_NAME }}@${{ env.DIGEST }}
